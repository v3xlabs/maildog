/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LogoutLayoutRouteImport } from './routes/logout/_layout'
import { Route as LoginLayoutRouteImport } from './routes/login/_layout'
import { Route as LogoutLayoutIndexRouteImport } from './routes/logout/_layout.index'
import { Route as LoginLayoutIndexRouteImport } from './routes/login/_layout.index'
import { Route as LayoutSettingsIndexRouteImport } from './routes/_layout.settings/index'
import { Route as LoginLayoutCallbackRouteImport } from './routes/login/_layout.callback'
import { Route as LayoutConfigureLayoutRouteImport } from './routes/_layout.configure/_layout'
import { Route as LayoutConfigureLayoutIndexRouteImport } from './routes/_layout.configure/_layout.index'
import { Route as LayoutConfigureLayoutInstanceIndexRouteImport } from './routes/_layout.configure/_layout.instance/index'
import { Route as LayoutConfigureLayoutInstanceHealthcheckRouteImport } from './routes/_layout.configure/_layout.instance/healthcheck'

const DebugLazyRouteImport = createFileRoute('/debug')()
const LayoutConfigureRouteImport = createFileRoute('/_layout/configure')()
const LayoutIndexLazyRouteImport = createFileRoute('/_layout/')()
const LoginLayoutCreateLazyRouteImport = createFileRoute(
  '/login/_layout/create',
)()
const LayoutTTagIndexLazyRouteImport = createFileRoute('/_layout/t/$tag/')()
const LayoutMMailIndexLazyRouteImport = createFileRoute('/_layout/m/$mail/')()
const LayoutMMailImap_uidLazyRouteImport = createFileRoute(
  '/_layout/m/$mail/$imap_uid',
)()

const DebugLazyRoute = DebugLazyRouteImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/debug.lazy').then((d) => d.Route))
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutConfigureRoute = LayoutConfigureRouteImport.update({
  id: '/configure',
  path: '/configure',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutIndexLazyRoute = LayoutIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import('./routes/_layout.index.lazy').then((d) => d.Route))
const LogoutLayoutRoute = LogoutLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => LogoutRoute,
} as any)
const LoginLayoutRoute = LoginLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => LoginRoute,
} as any)
const LogoutLayoutIndexRoute = LogoutLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LogoutLayoutRoute,
} as any)
const LoginLayoutIndexRoute = LoginLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LoginLayoutRoute,
} as any)
const LayoutSettingsIndexRoute = LayoutSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => LayoutRoute,
} as any)
const LoginLayoutCreateLazyRoute = LoginLayoutCreateLazyRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => LoginLayoutRoute,
} as any).lazy(() =>
  import('./routes/login/_layout.create.lazy').then((d) => d.Route),
)
const LoginLayoutCallbackRoute = LoginLayoutCallbackRouteImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => LoginLayoutRoute,
} as any)
const LayoutConfigureLayoutRoute = LayoutConfigureLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => LayoutConfigureRoute,
} as any)
const LayoutTTagIndexLazyRoute = LayoutTTagIndexLazyRouteImport.update({
  id: '/t/$tag/',
  path: '/t/$tag/',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() =>
  import('./routes/_layout.t/$tag/index.lazy').then((d) => d.Route),
)
const LayoutMMailIndexLazyRoute = LayoutMMailIndexLazyRouteImport.update({
  id: '/m/$mail/',
  path: '/m/$mail/',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() =>
  import('./routes/_layout.m/$mail/index.lazy').then((d) => d.Route),
)
const LayoutConfigureLayoutIndexRoute =
  LayoutConfigureLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => LayoutConfigureLayoutRoute,
  } as any)
const LayoutMMailImap_uidLazyRoute = LayoutMMailImap_uidLazyRouteImport.update({
  id: '/m/$mail/$imap_uid',
  path: '/m/$mail/$imap_uid',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() =>
  import('./routes/_layout.m/$mail/$imap_uid.lazy').then((d) => d.Route),
)
const LayoutConfigureLayoutInstanceIndexRoute =
  LayoutConfigureLayoutInstanceIndexRouteImport.update({
    id: '/instance/',
    path: '/instance/',
    getParentRoute: () => LayoutConfigureLayoutRoute,
  } as any)
const LayoutConfigureLayoutInstanceHealthcheckRoute =
  LayoutConfigureLayoutInstanceHealthcheckRouteImport.update({
    id: '/instance/healthcheck',
    path: '/instance/healthcheck',
    getParentRoute: () => LayoutConfigureLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/debug': typeof DebugLazyRoute
  '/login': typeof LoginLayoutRouteWithChildren
  '/logout': typeof LogoutLayoutRouteWithChildren
  '/': typeof LayoutIndexLazyRoute
  '/configure': typeof LayoutConfigureLayoutRouteWithChildren
  '/login/callback': typeof LoginLayoutCallbackRoute
  '/login/create': typeof LoginLayoutCreateLazyRoute
  '/settings': typeof LayoutSettingsIndexRoute
  '/login/': typeof LoginLayoutIndexRoute
  '/logout/': typeof LogoutLayoutIndexRoute
  '/m/$mail/$imap_uid': typeof LayoutMMailImap_uidLazyRoute
  '/configure/': typeof LayoutConfigureLayoutIndexRoute
  '/m/$mail': typeof LayoutMMailIndexLazyRoute
  '/t/$tag': typeof LayoutTTagIndexLazyRoute
  '/configure/instance/healthcheck': typeof LayoutConfigureLayoutInstanceHealthcheckRoute
  '/configure/instance': typeof LayoutConfigureLayoutInstanceIndexRoute
}
export interface FileRoutesByTo {
  '/debug': typeof DebugLazyRoute
  '/': typeof LayoutIndexLazyRoute
  '/configure': typeof LayoutConfigureLayoutIndexRoute
  '/login/callback': typeof LoginLayoutCallbackRoute
  '/login/create': typeof LoginLayoutCreateLazyRoute
  '/settings': typeof LayoutSettingsIndexRoute
  '/login': typeof LoginLayoutIndexRoute
  '/logout': typeof LogoutLayoutIndexRoute
  '/m/$mail/$imap_uid': typeof LayoutMMailImap_uidLazyRoute
  '/m/$mail': typeof LayoutMMailIndexLazyRoute
  '/t/$tag': typeof LayoutTTagIndexLazyRoute
  '/configure/instance/healthcheck': typeof LayoutConfigureLayoutInstanceHealthcheckRoute
  '/configure/instance': typeof LayoutConfigureLayoutInstanceIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/debug': typeof DebugLazyRoute
  '/login/_layout': typeof LoginLayoutRouteWithChildren
  '/logout/_layout': typeof LogoutLayoutRouteWithChildren
  '/_layout/': typeof LayoutIndexLazyRoute
  '/_layout/configure': typeof LayoutConfigureRouteWithChildren
  '/_layout/configure/_layout': typeof LayoutConfigureLayoutRouteWithChildren
  '/login/_layout/callback': typeof LoginLayoutCallbackRoute
  '/login/_layout/create': typeof LoginLayoutCreateLazyRoute
  '/_layout/settings/': typeof LayoutSettingsIndexRoute
  '/login/_layout/': typeof LoginLayoutIndexRoute
  '/logout/_layout/': typeof LogoutLayoutIndexRoute
  '/_layout/m/$mail/$imap_uid': typeof LayoutMMailImap_uidLazyRoute
  '/_layout/configure/_layout/': typeof LayoutConfigureLayoutIndexRoute
  '/_layout/m/$mail/': typeof LayoutMMailIndexLazyRoute
  '/_layout/t/$tag/': typeof LayoutTTagIndexLazyRoute
  '/_layout/configure/_layout/instance/healthcheck': typeof LayoutConfigureLayoutInstanceHealthcheckRoute
  '/_layout/configure/_layout/instance/': typeof LayoutConfigureLayoutInstanceIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/debug'
    | '/login'
    | '/logout'
    | '/'
    | '/configure'
    | '/login/callback'
    | '/login/create'
    | '/settings'
    | '/login/'
    | '/logout/'
    | '/m/$mail/$imap_uid'
    | '/configure/'
    | '/m/$mail'
    | '/t/$tag'
    | '/configure/instance/healthcheck'
    | '/configure/instance'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/debug'
    | '/'
    | '/configure'
    | '/login/callback'
    | '/login/create'
    | '/settings'
    | '/login'
    | '/logout'
    | '/m/$mail/$imap_uid'
    | '/m/$mail'
    | '/t/$tag'
    | '/configure/instance/healthcheck'
    | '/configure/instance'
  id:
    | '__root__'
    | '/_layout'
    | '/debug'
    | '/login/_layout'
    | '/logout/_layout'
    | '/_layout/'
    | '/_layout/configure'
    | '/_layout/configure/_layout'
    | '/login/_layout/callback'
    | '/login/_layout/create'
    | '/_layout/settings/'
    | '/login/_layout/'
    | '/logout/_layout/'
    | '/_layout/m/$mail/$imap_uid'
    | '/_layout/configure/_layout/'
    | '/_layout/m/$mail/'
    | '/_layout/t/$tag/'
    | '/_layout/configure/_layout/instance/healthcheck'
    | '/_layout/configure/_layout/instance/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  DebugLazyRoute: typeof DebugLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/debug': {
      id: '/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof DebugLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/configure': {
      id: '/_layout/configure'
      path: '/configure'
      fullPath: '/configure'
      preLoaderRoute: typeof LayoutConfigureRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexLazyRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/logout/_layout': {
      id: '/logout/_layout'
      path: ''
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutLayoutRouteImport
      parentRoute: typeof LogoutRoute
    }
    '/login/_layout': {
      id: '/login/_layout'
      path: ''
      fullPath: '/login'
      preLoaderRoute: typeof LoginLayoutRouteImport
      parentRoute: typeof LoginRoute
    }
    '/logout/_layout/': {
      id: '/logout/_layout/'
      path: '/'
      fullPath: '/logout/'
      preLoaderRoute: typeof LogoutLayoutIndexRouteImport
      parentRoute: typeof LogoutLayoutRoute
    }
    '/login/_layout/': {
      id: '/login/_layout/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof LoginLayoutIndexRouteImport
      parentRoute: typeof LoginLayoutRoute
    }
    '/_layout/settings/': {
      id: '/_layout/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/login/_layout/create': {
      id: '/login/_layout/create'
      path: '/create'
      fullPath: '/login/create'
      preLoaderRoute: typeof LoginLayoutCreateLazyRouteImport
      parentRoute: typeof LoginLayoutRoute
    }
    '/login/_layout/callback': {
      id: '/login/_layout/callback'
      path: '/callback'
      fullPath: '/login/callback'
      preLoaderRoute: typeof LoginLayoutCallbackRouteImport
      parentRoute: typeof LoginLayoutRoute
    }
    '/_layout/configure/_layout': {
      id: '/_layout/configure/_layout'
      path: '/configure'
      fullPath: '/configure'
      preLoaderRoute: typeof LayoutConfigureLayoutRouteImport
      parentRoute: typeof LayoutConfigureRoute
    }
    '/_layout/t/$tag/': {
      id: '/_layout/t/$tag/'
      path: '/t/$tag'
      fullPath: '/t/$tag'
      preLoaderRoute: typeof LayoutTTagIndexLazyRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/m/$mail/': {
      id: '/_layout/m/$mail/'
      path: '/m/$mail'
      fullPath: '/m/$mail'
      preLoaderRoute: typeof LayoutMMailIndexLazyRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/configure/_layout/': {
      id: '/_layout/configure/_layout/'
      path: '/'
      fullPath: '/configure/'
      preLoaderRoute: typeof LayoutConfigureLayoutIndexRouteImport
      parentRoute: typeof LayoutConfigureLayoutRoute
    }
    '/_layout/m/$mail/$imap_uid': {
      id: '/_layout/m/$mail/$imap_uid'
      path: '/m/$mail/$imap_uid'
      fullPath: '/m/$mail/$imap_uid'
      preLoaderRoute: typeof LayoutMMailImap_uidLazyRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/configure/_layout/instance/': {
      id: '/_layout/configure/_layout/instance/'
      path: '/instance'
      fullPath: '/configure/instance'
      preLoaderRoute: typeof LayoutConfigureLayoutInstanceIndexRouteImport
      parentRoute: typeof LayoutConfigureLayoutRoute
    }
    '/_layout/configure/_layout/instance/healthcheck': {
      id: '/_layout/configure/_layout/instance/healthcheck'
      path: '/instance/healthcheck'
      fullPath: '/configure/instance/healthcheck'
      preLoaderRoute: typeof LayoutConfigureLayoutInstanceHealthcheckRouteImport
      parentRoute: typeof LayoutConfigureLayoutRoute
    }
  }
}

interface LayoutConfigureLayoutRouteChildren {
  LayoutConfigureLayoutIndexRoute: typeof LayoutConfigureLayoutIndexRoute
  LayoutConfigureLayoutInstanceHealthcheckRoute: typeof LayoutConfigureLayoutInstanceHealthcheckRoute
  LayoutConfigureLayoutInstanceIndexRoute: typeof LayoutConfigureLayoutInstanceIndexRoute
}

const LayoutConfigureLayoutRouteChildren: LayoutConfigureLayoutRouteChildren = {
  LayoutConfigureLayoutIndexRoute: LayoutConfigureLayoutIndexRoute,
  LayoutConfigureLayoutInstanceHealthcheckRoute:
    LayoutConfigureLayoutInstanceHealthcheckRoute,
  LayoutConfigureLayoutInstanceIndexRoute:
    LayoutConfigureLayoutInstanceIndexRoute,
}

const LayoutConfigureLayoutRouteWithChildren =
  LayoutConfigureLayoutRoute._addFileChildren(
    LayoutConfigureLayoutRouteChildren,
  )

interface LayoutConfigureRouteChildren {
  LayoutConfigureLayoutRoute: typeof LayoutConfigureLayoutRouteWithChildren
}

const LayoutConfigureRouteChildren: LayoutConfigureRouteChildren = {
  LayoutConfigureLayoutRoute: LayoutConfigureLayoutRouteWithChildren,
}

const LayoutConfigureRouteWithChildren = LayoutConfigureRoute._addFileChildren(
  LayoutConfigureRouteChildren,
)

interface LayoutRouteChildren {
  LayoutIndexLazyRoute: typeof LayoutIndexLazyRoute
  LayoutConfigureRoute: typeof LayoutConfigureRouteWithChildren
  LayoutSettingsIndexRoute: typeof LayoutSettingsIndexRoute
  LayoutMMailImap_uidLazyRoute: typeof LayoutMMailImap_uidLazyRoute
  LayoutMMailIndexLazyRoute: typeof LayoutMMailIndexLazyRoute
  LayoutTTagIndexLazyRoute: typeof LayoutTTagIndexLazyRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexLazyRoute: LayoutIndexLazyRoute,
  LayoutConfigureRoute: LayoutConfigureRouteWithChildren,
  LayoutSettingsIndexRoute: LayoutSettingsIndexRoute,
  LayoutMMailImap_uidLazyRoute: LayoutMMailImap_uidLazyRoute,
  LayoutMMailIndexLazyRoute: LayoutMMailIndexLazyRoute,
  LayoutTTagIndexLazyRoute: LayoutTTagIndexLazyRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  DebugLazyRoute: DebugLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
